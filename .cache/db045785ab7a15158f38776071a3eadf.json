{"dependencies":[{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\tsconfig.json","includedInParent":true,"mtime":1522616336000},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\package.json","includedInParent":true,"mtime":1531260914979},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\package.json","includedInParent":true,"mtime":1531259444264},{"name":"vector_class","loc":{"line":3,"column":29},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\graphics\\Graphic.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\vector_class\\dist\\bundle.js"},{"name":"../Properties","loc":{"line":4,"column":27},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\graphics\\Graphic.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\Properties.ts"}],"generated":{"js":"\"use strict\";\r\nexports.__esModule = true;\r\nvar vector_class_1 = require(\"vector_class\");\r\nvar Properties_1 = require(\"../Properties\");\r\nvar Graphic = /** @class */ (function () {\r\n    function Graphic(data) {\r\n        this.weight = Properties_1.weights.normal;\r\n        this.fill = true;\r\n        this.stroke = false;\r\n        this.anchor = new vector_class_1.Vector2D(0.5, 0.5);\r\n        this.position = new vector_class_1.Vector2D(0, 0);\r\n        this.color = 'grey';\r\n        this.family = 'Arial';\r\n        this.lineCap = Properties_1.LineCap.round;\r\n        this.lineJoin = Properties_1.LineJoin.round;\r\n        this.lineColor = 'rgb(0, 0, 0)';\r\n        this.textAlign = 'center';\r\n        this.shadowColor = 'rgba(0, 0, 0, 0)';\r\n        this.textBaseline = 'middle';\r\n        this.size = 12;\r\n        this.rotation = 0;\r\n        this.z_index = 1;\r\n        this.lineWidth = 1;\r\n        this.miterLimit = 10;\r\n        this.shadowBlur = 0;\r\n        this.shadowOffsetX = 0;\r\n        this.shadowOffsetY = 0;\r\n        this.childs = [];\r\n        if (data) {\r\n            if (data.stroke !== undefined) {\r\n                if (typeof data.stroke === 'boolean') {\r\n                    this.stroke = data.stroke;\r\n                }\r\n                else {\r\n                    console.info(\"Type of stroke is not boolean\");\r\n                }\r\n            }\r\n            else {\r\n                this.stroke = false;\r\n            }\r\n            if (data.fill !== undefined) {\r\n                if (typeof data.fill === 'boolean') {\r\n                    this.fill = data.fill;\r\n                }\r\n                else {\r\n                    console.info(\"Type of fill is not boolean\");\r\n                }\r\n            }\r\n            else {\r\n                this.fill = true;\r\n            }\r\n            this.weight = data.weights ? data.weights : Properties_1.weights.normal;\r\n            this.anchor = data.anchor ? data.anchor : new vector_class_1.Vector2D(0.5, 0.5);\r\n            this.position = data.position ? data.position : new vector_class_1.Vector2D(0, 0);\r\n            this.z_index = data.z_index ? data.z_index : 1;\r\n            this.shadowBlur = data.shadowBlur ? data.shadowBlur : 0;\r\n            this.shadowOffsetX = data.shadowOffsetX ? data.shadowOffsetX : 0;\r\n            this.shadowOffsetY = data.shadowOffsetY ? data.shadowOffsetY : 0;\r\n            this.shadowColor = data.shadowColor ? data.shadowColor : 'rgba(0,0,0,0)';\r\n            this.miterLimit = data.miterLimit ? data.miterLimit : 10;\r\n            this.lineCap = data.lineCap ? data.lineCap : Properties_1.LineCap.round;\r\n            this.color = data.color ? data.color : 'grey';\r\n            this.family = data.family ? data.family : 'Arial';\r\n            this.lineJoin = data.lineJoin ? data.lineJoin : Properties_1.LineJoin.round;\r\n            this.lineColor = data.lineColor ? data.lineColor : 'rgb(50, 50, 50)';\r\n            this.textAlign = data.textAlign ? data.textAlign : 'center';\r\n            this.textBaseline = data.textBaseline ? data.textBaseline : 'middle';\r\n            this.size = data.size ? data.size : 12;\r\n            this.rotation = data.rotation ? data.rotation : 0;\r\n            this.lineWidth = data.lineWidth ? data.lineWidth : 1;\r\n        }\r\n    }\r\n    Graphic.prototype.add = function (child) {\r\n        child.context = this.context;\r\n        this.childs.push(child);\r\n    };\r\n    Graphic.prototype.remove = function (child) {\r\n        this.childs.push(child);\r\n    };\r\n    Graphic.prototype.getFont = function () {\r\n        return this.weight + \" \" + this.size + \"px \" + this.family;\r\n    };\r\n    Graphic.prototype.setStyle = function () {\r\n        this.context.font = this.getFont();\r\n        this.context.fillStyle = this.color;\r\n        this.context.lineCap = this.lineCap;\r\n        this.context.lineJoin = this.lineJoin;\r\n        this.context.strokeStyle = this.lineColor;\r\n        this.context.lineWidth = this.lineWidth;\r\n        this.context.textAlign = this.textAlign;\r\n        this.context.shadowColor = this.shadowColor;\r\n        this.context.textBaseline = this.textBaseline;\r\n        this.context.miterLimit = this.miterLimit;\r\n        this.context.shadowBlur = this.shadowBlur;\r\n        this.context.shadowOffsetX = this.shadowOffsetX;\r\n        this.context.shadowOffsetY = this.shadowOffsetY;\r\n    };\r\n    /*\r\n        Most be somewhere here\r\n    \r\n        this.childs.forEach(c => c.context = this.context)\r\n        this.childs.forEach(c => c.render())\r\n    \r\n    \r\n    */\r\n    Graphic.prototype.render = function () {\r\n        // this.context.save()\r\n        this.context.beginPath();\r\n        // if (this.context.fill || this.context.stroke) {\r\n        this.setStyle();\r\n        this.selfRender();\r\n        // }\r\n        // this.context.restore()\r\n    };\r\n    Graphic.prototype.selfRender = function () { };\r\n    return Graphic;\r\n}());\r\nexports[\"default\"] = Graphic;\r\n/*\r\n\r\n\r\n\r\n\r\n-------------------------------- GRUPO --------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Graphic from './graphics/Graphic'\r\nimport {Vector2D} from 'vector_class'\r\n\r\nexport default class Group {\r\n  private childs: Array<Graphic> = []\r\n  private context: CanvasRenderingContext2D\r\n  public position: Vector2D = new Vector2D(0, 0) // la posicion tu la tenias publica, asi que no tiene sentido ese metodo de translate que querias hacer\r\n  public scale: Vector2D = new Vector2D(1, 1)\r\n  public rotation: number\r\n\r\n  add(child: Graphic): void {\r\n    this.childs.push(child)\r\n  }\r\n\r\n  scaleObject(child: any) {\r\n    if (child.type == \"arc\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else if (child.type == \"line\") {\r\n      child.end = new Vector(child.end.x * this.scale.x, child.end.y * this.scale.y)\r\n      child.render()\r\n      child.end = new Vector(child.end.x / this.scale.x, child.end.y / this.scale.y)\r\n    } else if (child.type == \"img\" || child.type == \"rect\") {\r\n      child.width *= this.scale.x\r\n      child.height *= this.scale.y\r\n      child.render()\r\n      child.width /= this.scale.x\r\n      child.height /= this.scale.y\r\n    } else if (child.type == \"poligon\") {\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x * this.scale.x, pnt.y * this.scale.y)\r\n      })\r\n      child.render()\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x / this.scale.x, pnt.y / this.scale.y)\r\n      })\r\n    } else if (child.type == \"circle\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else {\r\n      throw \"error, no se puede escalar dicho objeto\"\r\n    }\r\n    return child\r\n  }\r\n\r\n  render(): void {\r\n    // this.context.save()\r\n    this.childs.forEach((child) => {\r\n      child.position.add(this.position)\r\n      child.context = this.context\r\n      child.render()\r\n      child.position.sub(this.position)\r\n    })\r\n    // this.context.restore()\r\n  }\r\n}\r\n\r\n*/ \r\n","map":{"version":3,"file":"Graphic.js","sourceRoot":"","sources":["node_modules\\dibujo\\src\\graphics\\Graphic.ts"],"names":[],"mappings":"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","sourcesContent":["import {Vector2D} from 'vector_class'\r\nimport { weights, LineCap, LineJoin } from '../Properties'\r\n\r\nclass Graphic {\r\n  public weight: weights = weights.normal\r\n  public context: any\r\n  public linearGradient: any\r\n  public fill: Boolean = true\r\n  public stroke: Boolean = false\r\n  public anchor: Vector2D = new Vector2D(0.5, 0.5)\r\n  public position: Vector2D = new Vector2D(0, 0)\r\n  public color: String = 'grey'\r\n  public family: String = 'Arial'\r\n  public lineCap: String = LineCap.round\r\n  public lineJoin: String = LineJoin.round\r\n  public lineColor: String = 'rgb(0, 0, 0)'\r\n  public textAlign: String = 'center'\r\n  public shadowColor: String = 'rgba(0, 0, 0, 0)'\r\n  public textBaseline: String = 'middle'\r\n  public size: Number = 12\r\n  public rotation: Number = 0\r\n  public z_index: Number = 1\r\n  public lineWidth: Number = 1\r\n  public miterLimit: Number = 10\r\n  public shadowBlur: Number = 0\r\n  public shadowOffsetX: Number = 0\r\n  public shadowOffsetY: Number = 0\r\n  public childs: Array<any> = []\r\n\r\n  constructor(data?: any) {\r\n    if (data) {\r\n      if (data.stroke !== undefined) {\r\n        if (typeof data.stroke === 'boolean') {\r\n          this.stroke = data.stroke\r\n        } else {\r\n          console.info(`Type of stroke is not boolean`)\r\n        }\r\n      } else {\r\n        this.stroke = false\r\n      }\r\n      if (data.fill !== undefined) {\r\n        if (typeof data.fill === 'boolean') {\r\n          this.fill = data.fill\r\n        } else {\r\n          console.info(`Type of fill is not boolean`)\r\n        }\r\n      } else {\r\n        this.fill = true\r\n      }\r\n      this.weight = data.weights ? data.weights : weights.normal\r\n      this.anchor = data.anchor ? data.anchor : new Vector2D(0.5, 0.5)\r\n      this.position = data.position ? data.position : new Vector2D(0, 0)\r\n      this.z_index = data.z_index ? data.z_index : 1\r\n      this.shadowBlur = data.shadowBlur ? data.shadowBlur : 0\r\n      this.shadowOffsetX = data.shadowOffsetX ? data.shadowOffsetX : 0\r\n      this.shadowOffsetY = data.shadowOffsetY ? data.shadowOffsetY : 0\r\n      this.shadowColor = data.shadowColor ? data.shadowColor : 'rgba(0,0,0,0)'\r\n      this.miterLimit = data.miterLimit ? data.miterLimit : 10\r\n      this.lineCap = data.lineCap ? data.lineCap : LineCap.round\r\n      this.color = data.color ? data.color : 'grey'\r\n      this.family = data.family ? data.family : 'Arial'\r\n      this.lineJoin = data.lineJoin ? data.lineJoin : LineJoin.round\r\n      this.lineColor = data.lineColor ? data.lineColor : 'rgb(50, 50, 50)'\r\n      this.textAlign = data.textAlign ? data.textAlign : 'center'\r\n      this.textBaseline = data.textBaseline ? data.textBaseline : 'middle'\r\n      this.size = data.size ? data.size : 12\r\n      this.rotation = data.rotation ? data.rotation : 0\r\n      this.lineWidth = data.lineWidth ? data.lineWidth : 1\r\n    }\r\n  }\r\n\r\n  add(child: any): void {\r\n    child.context = this.context\r\n    this.childs.push(child)\r\n  }\r\n\r\n  remove(child: any): void {\r\n    this.childs.push(child)\r\n  }\r\n\r\n  getFont() {\r\n    return `${this.weight} ${this.size}px ${this.family}`\r\n  }\r\n\r\n  setStyle(): void {\r\n    this.context.font = this.getFont()\r\n    this.context.fillStyle = this.color\r\n    this.context.lineCap = this.lineCap\r\n    this.context.lineJoin = this.lineJoin\r\n    this.context.strokeStyle = this.lineColor\r\n    this.context.lineWidth = this.lineWidth\r\n    this.context.textAlign = this.textAlign\r\n    this.context.shadowColor = this.shadowColor\r\n    this.context.textBaseline = this.textBaseline\r\n    this.context.miterLimit = this.miterLimit\r\n    this.context.shadowBlur = this.shadowBlur\r\n    this.context.shadowOffsetX = this.shadowOffsetX\r\n    this.context.shadowOffsetY = this.shadowOffsetY\r\n  }\r\n\r\n/*\r\n    Most be somewhere here\r\n\r\n    this.childs.forEach(c => c.context = this.context)\r\n    this.childs.forEach(c => c.render())\r\n\r\n\r\n*/\r\n\r\n  render(): void {\r\n    // this.context.save()\r\n   this.context.beginPath()\r\n   // if (this.context.fill || this.context.stroke) {\r\n      this.setStyle()\r\n      this.selfRender()\r\n   // }\r\n    // this.context.restore()\r\n  }\r\n\r\n  selfRender() { }\r\n}\r\n\r\nexport default Graphic\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n\r\n-------------------------------- GRUPO --------------------------------\r\n\r\n\r\n\r\n\r\n\r\n\r\nimport Graphic from './graphics/Graphic'\r\nimport {Vector2D} from 'vector_class'\r\n\r\nexport default class Group {\r\n  private childs: Array<Graphic> = []\r\n  private context: CanvasRenderingContext2D\r\n  public position: Vector2D = new Vector2D(0, 0) // la posicion tu la tenias publica, asi que no tiene sentido ese metodo de translate que querias hacer\r\n  public scale: Vector2D = new Vector2D(1, 1)\r\n  public rotation: number\r\n\r\n  add(child: Graphic): void {\r\n    this.childs.push(child)\r\n  }\r\n\r\n  scaleObject(child: any) {\r\n    if (child.type == \"arc\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else if (child.type == \"line\") {\r\n      child.end = new Vector(child.end.x * this.scale.x, child.end.y * this.scale.y)\r\n      child.render()\r\n      child.end = new Vector(child.end.x / this.scale.x, child.end.y / this.scale.y)\r\n    } else if (child.type == \"img\" || child.type == \"rect\") {\r\n      child.width *= this.scale.x\r\n      child.height *= this.scale.y\r\n      child.render()\r\n      child.width /= this.scale.x\r\n      child.height /= this.scale.y\r\n    } else if (child.type == \"poligon\") {\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x * this.scale.x, pnt.y * this.scale.y)\r\n      })\r\n      child.render()\r\n      child.cords.filter((pnt: any) => {\r\n        return new Vector(pnt.x / this.scale.x, pnt.y / this.scale.y)\r\n      })\r\n    } else if (child.type == \"circle\") {\r\n      child.radius *= this.scale.x\r\n      child.render()\r\n      child.radius /= this.scale.x\r\n    } else {\r\n      throw \"error, no se puede escalar dicho objeto\"\r\n    }\r\n    return child\r\n  }\r\n\r\n  render(): void {\r\n    // this.context.save()\r\n    this.childs.forEach((child) => {\r\n      child.position.add(this.position)\r\n      child.context = this.context\r\n      child.render()\r\n      child.position.sub(this.position)\r\n    })\r\n    // this.context.restore()\r\n  }\r\n}\r\n\r\n*/"]}},"hash":"669ac587ad387e0bcd29cdc929c011c2","cacheData":{"env":{}},"id":50}