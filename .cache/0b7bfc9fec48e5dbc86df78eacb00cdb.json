{"dependencies":[{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\vector_class\\tsconfig.json","includedInParent":true,"mtime":1513546872000},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\vector_class\\package.json","includedInParent":true,"mtime":1531327400609},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\package.json","includedInParent":true,"mtime":1531329788790}],"generated":{"js":"\"use strict\";\r\nexports.__esModule = true;\r\nvar Vector = /** @class */ (function () {\r\n    function Vector(x, y) {\r\n        if (x === void 0) { x = 0; }\r\n        if (y === void 0) { y = 0; }\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n    Vector.prototype.add = function (vector) {\r\n        this.x += vector.x;\r\n        this.y += vector.y;\r\n    };\r\n    Vector.prototype.sub = function (vector) {\r\n        this.x -= vector.x;\r\n        this.y -= vector.y;\r\n    };\r\n    Vector.prototype.mult = function (scalar) {\r\n        this.x *= scalar;\r\n        this.y *= scalar;\r\n    };\r\n    Vector.prototype.div = function (scalar) {\r\n        this.x /= scalar;\r\n        this.y /= scalar;\r\n    };\r\n    Vector.prototype.inverse = function () {\r\n        this.x *= -1;\r\n        this.y *= -1;\r\n    };\r\n    Vector.prototype.mag = function () {\r\n        return Math.sqrt(this.x * this.x + this.y * this.y);\r\n    };\r\n    Vector.prototype.dot = function (vector) {\r\n        return this.x * vector.x + this.y * vector.y;\r\n    };\r\n    Vector.prototype.distance = function (vector) {\r\n        return Vector.sub(this, vector).mag();\r\n    };\r\n    Vector.prototype.angle = function () {\r\n        return Math.atan2(this.y, this.x);\r\n    };\r\n    Vector.prototype.copy = function () {\r\n        return new Vector(this.x, this.y);\r\n    };\r\n    Vector.prototype.normalize = function () {\r\n        this.div(this.mag());\r\n    };\r\n    Vector.prototype.setMag = function (mag) {\r\n        this.normalize();\r\n        this.mult(mag);\r\n    };\r\n    Vector.prototype.setAngle = function (angle) {\r\n        var magnitude = this.mag();\r\n        this.x = magnitude * Math.cos(angle);\r\n        this.y = magnitude * Math.sin(angle);\r\n    };\r\n    Vector.prototype.addAngle = function (angle) {\r\n        this.setAngle(this.angle() + angle);\r\n    };\r\n    Vector.prototype.limit = function (scalar) {\r\n        if (this.mag() > scalar) {\r\n            this.setMag(scalar);\r\n        }\r\n    };\r\n    Vector.prototype.moveTowards = function (vector, speed, stop) {\r\n        if (speed === void 0) { speed = 1; }\r\n        if (stop === void 0) { stop = 1; }\r\n        if (this.distance(vector) > stop) {\r\n            var unit = Vector.normalize(Vector.sub(vector, this));\r\n            unit.mult(speed);\r\n            this.add(unit);\r\n        }\r\n    };\r\n    Vector.prototype.zero = function () {\r\n        this.x = 0;\r\n        this.y = 0;\r\n    };\r\n    Vector.add = function (vector1, vector2) {\r\n        return new Vector(vector1.x + vector2.x, vector1.y + vector2.y);\r\n    };\r\n    Vector.sub = function (vector1, vector2) {\r\n        return new Vector(vector1.x - vector2.x, vector1.y - vector2.y);\r\n    };\r\n    Vector.mult = function (vector, scalar) {\r\n        return new Vector(vector.x * scalar, vector.y * scalar);\r\n    };\r\n    Vector.div = function (vector, scalar) {\r\n        return new Vector(vector.x / scalar, vector.y / scalar);\r\n    };\r\n    Vector.inverse = function (vector) {\r\n        return new Vector(vector.x * -1, vector.y * -1);\r\n    };\r\n    Vector.distance = function (vector1, vector2) {\r\n        return this.sub(vector1, vector2).mag();\r\n    };\r\n    Vector.normalize = function (vector) {\r\n        return this.div(vector, vector.mag());\r\n    };\r\n    Vector.cross = function (vector1, vector2) {\r\n        return vector1.x * vector2.y - vector2.x * vector1.y;\r\n    };\r\n    Vector.randomP = function (x, y) {\r\n        return new Vector(x * Math.random(), y * Math.random());\r\n    };\r\n    Vector.random = function (x, y) {\r\n        if (x === void 0) { x = 1; }\r\n        if (y === void 0) { y = 1; }\r\n        var s1 = 1;\r\n        var s2 = 1;\r\n        if (Math.random() > 0.5)\r\n            s1 = -1;\r\n        if (Math.random() > 0.5)\r\n            s2 = -1;\r\n        return new Vector(x * Math.random() * s1, y * Math.random() * s2);\r\n    };\r\n    return Vector;\r\n}());\r\nexports[\"default\"] = Vector;\r\n","map":{"version":3,"file":"Vector2D.js","sourceRoot":"","sources":["node_modules\\vector_class\\src\\Vector2D.ts"],"names":[],"mappings":"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","sourcesContent":["class Vector {\r\n  public x: number\r\n  public y: number\r\n\r\n  constructor (x: number = 0, y: number = 0) {\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  add (vector: Vector): void {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n  }\r\n\r\n  sub (vector: Vector): void {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n  }\r\n\r\n  mult (scalar: number): void {\r\n    this.x *= scalar\r\n    this.y *= scalar\r\n  }\r\n\r\n  div (scalar: number): void {\r\n    this.x /= scalar\r\n    this.y /= scalar\r\n  }\r\n\r\n  inverse (): void {\r\n    this.x *= -1\r\n    this.y *= -1\r\n  }\r\n\r\n  mag (): number {\r\n    return Math.sqrt(this.x * this.x + this.y * this.y)\r\n  }\r\n\r\n  dot (vector: Vector): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  distance (vector: Vector): number {\r\n    return Vector.sub(this, vector).mag()\r\n  }\r\n\r\n  angle (): number {\r\n    return Math.atan2(this.y, this.x)\r\n  }\r\n\r\n  copy (): Vector {\r\n    return new Vector(this.x, this.y)\r\n  }\r\n\r\n  normalize (): void {\r\n    this.div(this.mag())\r\n  }\r\n\r\n  setMag (mag: number): void {\r\n    this.normalize()\r\n    this.mult(mag)\r\n  }\r\n\r\n  setAngle (angle: number): void {\r\n    const magnitude = this.mag()\r\n\r\n    this.x = magnitude * Math.cos(angle)\r\n    this.y =  magnitude * Math.sin(angle)\r\n  }\r\n\r\n  addAngle (angle: number): void {\r\n    this.setAngle(this.angle() + angle)\r\n  }\r\n\r\n  limit (scalar: number): void {\r\n    if (this.mag() > scalar) {\r\n      this.setMag(scalar)\r\n    }\r\n  }\r\n\r\n  moveTowards (vector: Vector, speed: number = 1, stop: number = 1): void {\r\n    if (this.distance(vector) > stop) {\r\n      const unit = Vector.normalize(Vector.sub(vector, this))\r\n      unit.mult(speed)\r\n      this.add(unit)\r\n    }\r\n  }\r\n\r\n  zero (): void {\r\n    this.x = 0\r\n    this.y = 0\r\n  }\r\n\r\n  static add (vector1: Vector, vector2: Vector): Vector {\r\n    return new Vector(vector1.x + vector2.x, vector1.y + vector2.y)\r\n  }\r\n\r\n  static sub (vector1: Vector, vector2: Vector): Vector {\r\n    return new Vector(vector1.x - vector2.x, vector1.y - vector2.y)\r\n  }\r\n\r\n  static mult (vector: Vector, scalar: number): Vector {\r\n    return new Vector(vector.x * scalar, vector.y * scalar)\r\n  }\r\n\r\n  static div (vector: Vector, scalar: number): Vector {\r\n    return new Vector(vector.x / scalar, vector.y / scalar)\r\n  }\r\n\r\n  static inverse (vector: Vector): Vector {\r\n    return new Vector(vector.x * -1, vector.y * -1)\r\n  }\r\n\r\n  static distance (vector1: Vector, vector2: Vector): number {\r\n    return this.sub(vector1, vector2).mag()\r\n  }\r\n\r\n  static normalize (vector: Vector): Vector {\r\n    return this.div(vector, vector.mag())\r\n  }\r\n\r\n  static cross (vector1: Vector, vector2: Vector): number {\r\n    return vector1.x * vector2.y - vector2.x * vector1.y\r\n  }\r\n\r\n  static randomP (x: number, y: number): Vector {\r\n    return new Vector(x * Math.random(), y * Math.random())\r\n  }\r\n\r\n  static random (x: number = 1, y: number = 1): Vector {\r\n    let s1 = 1\r\n    let s2 = 1\r\n    if (Math.random() > 0.5) s1 = -1\r\n    if (Math.random() > 0.5) s2 = -1\r\n    return new Vector(x * Math.random() * s1, y * Math.random() * s2)\r\n  }\r\n}\r\n\r\nexport default Vector\r\n  "]}},"hash":"8e26ae8adef1962ac7f657bb4e27ea41","cacheData":{"env":{}},"id":121}