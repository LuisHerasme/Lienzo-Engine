{"dependencies":[{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\tsconfig.json","includedInParent":true,"mtime":1522616336000},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\package.json","includedInParent":true,"mtime":1531260914979},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\package.json","includedInParent":true,"mtime":1531259444264},{"name":"./Scene","loc":{"line":6,"column":38},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\Render.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\Scene.ts"},{"name":"vector_class","loc":{"line":7,"column":29},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\dibujo\\src\\Render.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\vector_class\\dist\\bundle.js"}],"generated":{"js":"\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nexports.__esModule = true;\r\nvar Scene_1 = __importDefault(require(\"./Scene\"));\r\nvar vector_class_1 = require(\"vector_class\");\r\nvar Render = /** @class */ (function () {\r\n    function Render(canvas, width, height) {\r\n        var _this = this;\r\n        this.frameRate = 1000 / 60;\r\n        if (canvas) {\r\n            var _canvas = document.getElementById(canvas);\r\n            if (_canvas !== null) {\r\n                if (_canvas.tagName === 'CANVAS') {\r\n                    this.canvas = _canvas;\r\n                }\r\n                else {\r\n                    console.error('The ID provided is not a of canvas elements');\r\n                }\r\n            }\r\n            else {\r\n                console.error('The ID provided is not in the DOM');\r\n            }\r\n        }\r\n        else {\r\n            this.canvas = document.createElement('canvas');\r\n            document.body.appendChild(this.canvas);\r\n        }\r\n        if (width && height) {\r\n            this.canvas.width = width;\r\n            this.canvas.height = height;\r\n        }\r\n        else {\r\n            this.canvas.width = window.innerWidth;\r\n            this.canvas.height = window.innerHeight;\r\n        }\r\n        window.addEventListener('resize', function () {\r\n            _this.canvas.width = window.innerWidth;\r\n            _this.canvas.height = window.innerHeight;\r\n        });\r\n        this.context = this.canvas.getContext('2d');\r\n        var scene = new Scene_1[\"default\"](this);\r\n        this.setScene(scene);\r\n    }\r\n    Render.prototype.add = function (element) {\r\n        this.scene.add(element);\r\n    };\r\n    Render.prototype.remove = function (element) {\r\n        this.scene.remove(element);\r\n    };\r\n    Render.prototype.addMultiple = function (e) {\r\n        var _this = this;\r\n        e.forEach(function (m) { return _this.add(m); });\r\n    };\r\n    /*\r\n    autoUpdateRender (func?: Function) {\r\n      this.scene.autoRender(func)\r\n    }\r\n    */\r\n    Render.prototype.getWidth = function () {\r\n        return this.canvas.width;\r\n    };\r\n    Render.prototype.getHeight = function () {\r\n        return this.canvas.height;\r\n    };\r\n    Render.prototype.getSize = function () {\r\n        return new vector_class_1.Vector2D(this.canvas.width, this.canvas.height);\r\n    };\r\n    Render.prototype.getCenter = function () {\r\n        return new vector_class_1.Vector2D(this.canvas.width / 2, this.canvas.height / 2);\r\n    };\r\n    Render.prototype.getCanvasImage = function () {\r\n        return this.canvas.toDataURL();\r\n    };\r\n    /*\r\n      filter () {\r\n        let image = new Image()\r\n        image.src = this.getCanvasImage()\r\n    \r\n      }\r\n    */\r\n    Render.prototype.fullScreen = function () {\r\n        var _this = this;\r\n        var isFull = false;\r\n        document.addEventListener('click', function () {\r\n            if (!isFull) {\r\n                _this.canvas.webkitRequestFullScreen();\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * This method renders the screne ultil you call stopAutoRender\r\n     */\r\n    Render.prototype.autoRender = function (func) {\r\n        var _this = this;\r\n        this.interval = setInterval(function () {\r\n            if (func)\r\n                func();\r\n            _this.render();\r\n        }, this.frameRate);\r\n    };\r\n    Render.prototype.render = function () {\r\n        this.scene.render();\r\n    };\r\n    Render.prototype.setScene = function (scene) {\r\n        this.scene = scene;\r\n        this.scene.renderer = this;\r\n        this.scene.context = this.context;\r\n        this.scene.smoth(false);\r\n    };\r\n    return Render;\r\n}());\r\nexports[\"default\"] = Render;\r\n","map":{"version":3,"file":"Render.js","sourceRoot":"","sources":["node_modules\\dibujo\\src\\Render.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport Scene from './Scene'\r\nimport Graphic from './graphics/Graphic'\r\nimport { Vector2D } from 'vector_class'\r\n\r\nclass Render {\r\n  \r\n  public scene: Scene\r\n  public canvas: HTMLCanvasElement\r\n  public context: CanvasRenderingContext2D\r\n  public interval: any\r\n  public frameRate: number = 1000 / 60\r\n\r\n  constructor(canvas?: string, width?: number, height?: number) {\r\n\r\n    if (canvas) {\r\n      const _canvas = document.getElementById(canvas)\r\n      if (_canvas !== null) {\r\n        if (_canvas.tagName === 'CANVAS') {\r\n          this.canvas = _canvas\r\n        } else {\r\n          console.error('The ID provided is not a of canvas elements')\r\n        }\r\n      } else {\r\n        console.error('The ID provided is not in the DOM')\r\n      }\r\n    } else {\r\n      this.canvas = document.createElement('canvas')\r\n      document.body.appendChild(this.canvas)\r\n    }\r\n\r\n    if (width && height) {\r\n      this.canvas.width = width\r\n      this.canvas.height = height\r\n    } else {\r\n      this.canvas.width = window.innerWidth\r\n      this.canvas.height = window.innerHeight\r\n    }\r\n\r\n    window.addEventListener('resize', () => {\r\n      this.canvas.width = window.innerWidth\r\n      this.canvas.height = window.innerHeight\r\n    })\r\n\r\n    this.context = this.canvas.getContext('2d')\r\n    const scene = new Scene(this)\r\n    this.setScene(scene)\r\n  }\r\n\r\n  add(element: any): void {\r\n    this.scene.add(element)\r\n  }\r\n\r\n  remove(element: Graphic): void {\r\n    this.scene.remove(element)\r\n  }\r\n\r\n  addMultiple(e: Array<Graphic>): void {\r\n    e.forEach((m) => this.add(m))\r\n  }\r\n\r\n  /*\r\n  autoUpdateRender (func?: Function) {\r\n    this.scene.autoRender(func)\r\n  }\r\n  */\r\n\r\n  getWidth(): number {\r\n    return this.canvas.width\r\n  }\r\n\r\n  getHeight(): number {\r\n    return this.canvas.height\r\n  }\r\n\r\n  getSize(): Vector2D {\r\n    return new Vector2D(\r\n      this.canvas.width,\r\n      this.canvas.height)\r\n  }\r\n\r\n  getCenter(): Vector2D {\r\n    return new Vector2D(\r\n      this.canvas.width / 2,\r\n      this.canvas.height / 2)\r\n  }\r\n\r\n  getCanvasImage() {\r\n    return this.canvas.toDataURL()\r\n  }\r\n  /*\r\n    filter () {\r\n      let image = new Image()\r\n      image.src = this.getCanvasImage() \r\n  \r\n    }\r\n  */\r\n  fullScreen() {\r\n    let isFull = false\r\n    document.addEventListener('click', () => {\r\n      if (!isFull) {\r\n        this.canvas.webkitRequestFullScreen()\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * This method renders the screne ultil you call stopAutoRender\r\n   */\r\n  autoRender(func?: Function): void {\r\n    this.interval = setInterval(() => {\r\n      if (func) func()\r\n      this.render()\r\n    }, this.frameRate)\r\n  }\r\n\r\n  render() {\r\n    this.scene.render()\r\n  }\r\n\r\n  setScene(scene: Scene): void {\r\n    this.scene = scene\r\n    this.scene.renderer = this\r\n    this.scene.context = this.context\r\n    this.scene.smoth(false)\r\n  }\r\n}\r\n\r\nexport default Render\r\n"]}},"hash":"afbd3b8fb30bf61ccbb15440866c1173","cacheData":{"env":{}},"id":44}