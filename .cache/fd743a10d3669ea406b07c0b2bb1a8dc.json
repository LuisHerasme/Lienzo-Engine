{"dependencies":[{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\tsconfig.json","includedInParent":true,"mtime":1521243480000},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\package.json","includedInParent":true,"mtime":1531327400610},{"name":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\package.json","includedInParent":true,"mtime":1531329788790},{"name":"./Rect/RigidBody","loc":{"line":6,"column":42},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\src\\World.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\src\\Rect\\RigidBody.ts"},{"name":"./Circle/RigidBody","loc":{"line":7,"column":42},"parent":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\src\\World.ts","resolved":"C:\\Users\\Luis Herasme\\Desktop\\LienzoEngine\\node_modules\\fisica\\src\\Circle\\RigidBody.ts"}],"generated":{"js":"\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nexports.__esModule = true;\r\nvar RigidBody_1 = __importDefault(require(\"./Rect/RigidBody\"));\r\nvar RigidBody_2 = __importDefault(require(\"./Circle/RigidBody\"));\r\nvar World = /** @class */ (function () {\r\n    function World() {\r\n        this.maxPositionX = 800;\r\n        this.minPositionX = 0;\r\n        this.maxPositionY = 600;\r\n        this.minPositionY = 0;\r\n        this.particles = [];\r\n        this.dynamicParticles = [];\r\n    }\r\n    World.prototype.setBounds = function (maxX, minX, maxY, minY) {\r\n        this.maxPositionX = maxX;\r\n        this.minPositionX = minX;\r\n        this.maxPositionY = maxY;\r\n        this.minPositionY = minY;\r\n    };\r\n    World.prototype.add = function (particle) {\r\n        if ((particle instanceof RigidBody_1[\"default\"]) || (particle instanceof RigidBody_2[\"default\"])) {\r\n            this.dynamicParticles.push(particle);\r\n        }\r\n        else {\r\n            particle.World = this;\r\n            this.particles.push(particle);\r\n        }\r\n    };\r\n    World.prototype.remove = function (particle) {\r\n        if ((particle instanceof RigidBody_1[\"default\"]) || (particle instanceof RigidBody_2[\"default\"])) {\r\n            var index = this.dynamicParticles.indexOf(particle);\r\n            if (index > -1) {\r\n                this.dynamicParticles = this.dynamicParticles.slice(index, 1);\r\n            }\r\n        }\r\n        else {\r\n            var index = this.particles.indexOf(particle);\r\n            if (index > -1) {\r\n                this.particles = this.particles.slice(index, 1);\r\n            }\r\n        }\r\n    };\r\n    World.prototype.insideWorldBounds = function (particle) {\r\n        if (particle.position.x > this.maxPositionX) {\r\n            particle.position.x = this.maxPositionX;\r\n            particle.velocity.x *= -1;\r\n        }\r\n        else if (particle.position.x < this.minPositionX) {\r\n            particle.position.x = this.minPositionX;\r\n            particle.velocity.x *= -1;\r\n        }\r\n        if (particle.position.y > this.maxPositionY) {\r\n            particle.position.y = this.maxPositionY;\r\n            particle.velocity.y *= -1;\r\n        }\r\n        else if (particle.position.y < this.minPositionY) {\r\n            particle.position.y = this.minPositionY;\r\n            particle.velocity.y *= -1;\r\n        }\r\n    };\r\n    World.prototype.update = function () {\r\n        for (var index = 0; index < this.dynamicParticles.length; index++) {\r\n            var particle = this.dynamicParticles[index];\r\n            for (var index2 = 0; index2 < this.particles.length; index2++) {\r\n                var particle2 = this.particles[index2];\r\n                particle.collidesWith(particle2);\r\n            }\r\n            for (var index2 = 0; index2 < this.dynamicParticles.length; index2++) {\r\n                if (index !== index2) {\r\n                    var particle2 = this.dynamicParticles[index2];\r\n                    particle.collidesWith(particle2);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return World;\r\n}());\r\nexports[\"default\"] = World;\r\n","map":{"version":3,"file":"World.js","sourceRoot":"","sources":["node_modules\\fisica\\src\\World.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport DynamicRect from './Rect/RigidBody'\r\nimport DynamicCircle from './Circle/RigidBody'\r\n\r\nclass World {\r\n\r\n  public maxPositionX: number = 800\r\n  public minPositionX: number = 0\r\n  public maxPositionY: number = 600\r\n  public minPositionY: number = 0\r\n\r\n  public particles: Array<any> = []\r\n  public dynamicParticles: Array<any> = []\r\n\r\n  setBounds(maxX: number, minX: number, maxY: number, minY: number): void {\r\n    this.maxPositionX = maxX\r\n    this.minPositionX = minX\r\n    this.maxPositionY = maxY\r\n    this.minPositionY = minY\r\n  }\r\n\r\n  add(particle): void {\r\n    if ((particle instanceof DynamicRect) || (particle instanceof DynamicCircle)) {\r\n      this.dynamicParticles.push(particle)\r\n    } else {\r\n      particle.World = this\r\n      this.particles.push(particle)\r\n    }\r\n  }\r\n\r\n  remove(particle): void {\r\n    if ((particle instanceof DynamicRect) || (particle instanceof DynamicCircle)) {\r\n      const index = this.dynamicParticles.indexOf(particle)\r\n      if (index > -1) {\r\n        this.dynamicParticles = this.dynamicParticles.slice(index, 1)\r\n      }\r\n    } else {\r\n      const index = this.particles.indexOf(particle)\r\n      if (index > -1) {\r\n        this.particles = this.particles.slice(index, 1)\r\n      }\r\n    }\r\n  }\r\n\r\n  insideWorldBounds(particle): void {\r\n    if (particle.position.x > this.maxPositionX) {\r\n      particle.position.x = this.maxPositionX\r\n      particle.velocity.x *= -1\r\n    } else if (particle.position.x < this.minPositionX) {\r\n      particle.position.x = this.minPositionX\r\n      particle.velocity.x *= -1\r\n    }\r\n\r\n    if (particle.position.y > this.maxPositionY) {\r\n      particle.position.y = this.maxPositionY\r\n      particle.velocity.y *= -1\r\n    } else if (particle.position.y < this.minPositionY) {\r\n      particle.position.y = this.minPositionY\r\n      particle.velocity.y *= -1\r\n    }\r\n  }\r\n\r\n  update(): void {\r\n    for (let index = 0; index < this.dynamicParticles.length; index++) {\r\n      const particle = this.dynamicParticles[index]\r\n\r\n      for (let index2 = 0; index2 < this.particles.length; index2++) {\r\n        const particle2 = this.particles[index2]\r\n        particle.collidesWith(particle2)\r\n      }\r\n\r\n      for (let index2 = 0; index2 < this.dynamicParticles.length; index2++) {\r\n        if (index !== index2) {\r\n          const particle2 = this.dynamicParticles[index2]\r\n          particle.collidesWith(particle2)\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default World\r\n"]}},"hash":"51295468f52d731de9c3abdeb09032bf","cacheData":{"env":{}},"id":80}